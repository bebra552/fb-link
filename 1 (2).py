import time
import random
import csv
import os
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service


def human_delay(min_delay=1, max_delay=3):
    time.sleep(random.uniform(min_delay, max_delay))


def setup_stealth_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ü–∏–µ–π –±–µ–∑ selenium_stealth"""
    options = webdriver.ChromeOptions()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ü–∏–∏
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--disable-infobars")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-web-security")
    options.add_argument("--allow-running-insecure-content")
    options.add_argument("--disable-features=VizDisplayCompositor")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
    ]
    options.add_argument(f"user-agent={random.choice(user_agents)}")
    
    # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    
    # –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
    stealth_scripts = [
        "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})",
        "Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})",
        "Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})",
        "window.chrome = {runtime: {}}",
        "Object.defineProperty(navigator, 'permissions', {get: () => ({query: () => Promise.resolve({state: 'granted'})})})"
    ]
    
    for script in stealth_scripts:
        try:
            driver.execute_script(script)
        except:
            pass
    
    return driver


def extract_profile_data(target_div):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ —Ä–∞–∑–¥–µ–ª–∞ '–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ'"""
    lines = [line.strip() for line in target_div.stripped_strings]
    actual_index = next((i for i, line in enumerate(lines) if '–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ' in line), None)
    profile_info = lines[:actual_index] if actual_index is not None else lines
    cleaned_lines = [line.replace('\u200b', '').strip() for line in profile_info if line.strip()]
    return '\n'.join(cleaned_lines)


def extract_name(soup):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û –∏–∑ h1 —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏"""
    name_h1 = soup.find('h1',
                        class_='html-h1 xdj266r x14z9mp xat24cr x1lziwak xexx8yu xyri2b x18d9i69 x1c1uobl x1vvkbs x1heor9g x1qlqyl8 x1pd3egz x1a2a7pz')
    if name_h1:
        name_text = name_h1.get_text(strip=True)
        name_text = name_text.replace('\u00a0', ' ').strip()
        return name_text
    return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"


def scrape_profile_data(driver, profile_url):
    print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é: {profile_url}")
    driver.get(profile_url)
    human_delay(3, 6)

    try:
        window_size = driver.get_window_size()
        max_x = min(100, window_size['width'] // 2)
        max_y = min(100, window_size['height'] // 2)
        if max_x > 10 and max_y > 10:
            actions = ActionChains(driver)
            actions.move_by_offset(random.randint(10, max_x), random.randint(10, max_y)).perform()
            human_delay(1, 2)
    except Exception:
        pass

    soup = BeautifulSoup(driver.page_source, 'html.parser')
    target_div = soup.find('div', class_='xieb3on')

    if not target_div:
        print("‚ö†Ô∏è –ë–ª–æ–∫ <div class='xieb3on'> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None, None

    print("‚úÖ –ë–ª–æ–∫ –Ω–∞–π–¥–µ–Ω!")
    formatted_profile = extract_profile_data(target_div)
    name = extract_name(soup)
    return formatted_profile, name


def get_links_from_file():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
    while True:
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ü–û–õ–ù–´–ô –ü–£–¢–¨ –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏: ").strip().replace('"', '')

        if not file_path:
            print("‚ùå –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            continue

        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            retry = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (y/n): ").lower()
            if retry != 'y':
                return []
            continue

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                links = []
                for line_num, line in enumerate(file, 1):
                    line = line.strip()
                    if line and 'facebook.com' in line:
                        links.append(line)
                    elif line and 'facebook.com' not in line:
                        print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {line_num} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ Facebook —Å—Å—ã–ª–∫–∞): {line[:50]}...")

                if links:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")
                    return links
                else:
                    print("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö Facebook —Å—Å—ã–ª–æ–∫")
                    return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return []


def get_links_manually():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º"""
    print("\nüìù –†–£–ß–ù–û–ô –í–í–û–î –°–°–´–õ–û–ö")
    print("–í–≤–æ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'stop'")
    print("–ü—Ä–∏–º–µ—Ä: https://www.facebook.com/username")
    print("-" * 50)

    links = []
    while True:
        link = input(f"–°—Å—ã–ª–∫–∞ #{len(links) + 1} (–∏–ª–∏ 'stop' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()

        if link.lower() == 'stop':
            break

        if not link:
            continue

        if 'facebook.com' in link:
            links.append(link)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ #{len(links)}")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ Facebook.")

    return links


def get_links_paste():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–æ–π"""
    print("\nüìÑ –ú–ê–°–°–û–í–ê–Ø –í–°–¢–ê–í–ö–ê –°–°–´–õ–û–ö")
    print("–ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –≤–≤–µ–¥–∏—Ç–µ 'END' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ")
    print("-" * 50)

    links = []
    print("–í—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")

    while True:
        line = input().strip()

        if line.upper() == 'END':
            break

        if not line:
            continue

        if 'facebook.com' in line:
            links.append(line)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ #{len(links)}")
        else:
            print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞: {line[:50]}...")

    return links


def get_links_from_user():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n" + "=" * 60)
    print("üìã –í–´–ë–ï–†–ò–¢–ï –°–ü–û–°–û–ë –î–û–ë–ê–í–õ–ï–ù–ò–Ø –°–°–´–õ–û–ö")
    print("=" * 60)
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (—É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å)")
    print("2. –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –ø–æ –æ–¥–Ω–æ–π")
    print("3. –í—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ (–∫–æ–ø–∏–ø–∞—Å—Ç)")
    print("-" * 60)

    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()

        if choice == "1":
            return get_links_from_file()
        elif choice == "2":
            return get_links_manually()
        elif choice == "3":
            return get_links_paste()
        else:
            print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3!")


def save_to_csv(data, filename='results.csv'):
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile, delimiter=';', quotechar='"', quoting=csv.QUOTE_ALL)
        writer.writerow(['–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç', '–§–ò–û', '–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±—ä–µ–∫—Ç–∞'])
        for row in data:
            cleaned_row = []
            for cell in row:
                cleaned_cell = str(cell).replace('\u200b', '').replace('\n', ' ').replace('\r', ' ')
                cleaned_row.append(cleaned_cell)
            writer.writerow(cleaned_row)


def main():
    print("üöÄ FACEBOOK PROFILE SCRAPER")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏
    profile_links = get_links_from_user()

    if not profile_links:
        print("\n‚ùå –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    print(f"\nüìä –ì–û–¢–û–í–û –ö –û–ë–†–ê–ë–û–¢–ö–ï: {len(profile_links)} –ø—Ä–æ—Ñ–∏–ª–µ–π")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if len(profile_links) <= 10:
        print("\nüîç –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫:")
        for i, link in enumerate(profile_links, 1):
            print(f"  {i}. {link}")
    else:
        print(f"\nüîç –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫ –∏–∑ {len(profile_links)}:")
        for i, link in enumerate(profile_links[:5], 1):
            print(f"  {i}. {link}")
        print(f"  ... –∏ –µ—â–µ {len(profile_links) - 5}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "-" * 60)
    confirm = input("üöÄ –ù–ê–ß–ê–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£? (y/n): ").lower()
    if confirm != 'y':
        print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    print("\nüîß –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ü–∏–µ–π
    driver = setup_stealth_driver()

    try:
        print("üîê –û—Ç–∫—Ä—ã–≤–∞—é Facebook –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        driver.get("https://www.facebook.com/login")
        human_delay(2, 4)

        try:
            window_size = driver.get_window_size()
            safe_x = random.randint(10, min(100, window_size['width'] // 4))
            safe_y = random.randint(10, min(100, window_size['height'] // 4))
            actions = ActionChains(driver)
            actions.move_by_offset(safe_x, safe_y).perform()
        except:
            pass

        print("\n" + "=" * 60)
        print("üîë –í–û–ô–î–ò–¢–ï –í –°–í–û–ô –ê–ö–ö–ê–£–ù–¢ FACEBOOK –í –û–¢–ö–†–´–í–®–ï–ú–°–Ø –ë–†–ê–£–ó–ï–†–ï")
        print("=" * 60)
        input("–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ‚û°Ô∏è ")

        human_delay(3, 6)

        print("\nüöÄ –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –ü–†–û–§–ò–õ–ï–ô...")
        print("=" * 60)

        results = []
        for i, profile_url in enumerate(profile_links, 1):
            print(f"\nüìä [{i}/{len(profile_links)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–æ—Ñ–∏–ª—å...")
            try:
                formatted_profile, name = scrape_profile_data(driver, profile_url)
                if formatted_profile:
                    results.append([profile_url, name, formatted_profile])
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {name}")
                else:
                    results.append([profile_url, name if name else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"])
                    print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                results.append([profile_url, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"])

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
            if i < len(profile_links):
                print("‚è±Ô∏è –ü–∞—É–∑–∞...")
                human_delay(5, 10)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_to_csv(results)
        print(f"\nüíæ –ì–û–¢–û–í–û! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results.csv")
        print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {os.path.abspath('results.csv')}")

        print("\n" + "=" * 60)
        input("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è ‚û°Ô∏è ")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            driver.quit()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")
        except:
            pass
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main()
